"""State machine that finds all cuboids in a given channel and enqueues their
S3 object keys in SQS.

Index.FindCuboids

Inputs:
{
    "config": {
      "object_store_config": {
        "id_count_table": "idCount.domain.boss",
        "page_in_lambda_function": "multiLambda-domain-boss",
        "page_out_lambda_function": "multiLambda-domain-boss",
        "cuboid_bucket": "cuboids.domain.boss",
        "s3_index_table": "s3index.domain.boss",
        "id_index_table": "idIndex.domain.boss",
        "s3_flush_queue": "https://queue.amazonaws.com/...",
        "id_index_new_chunk_threshold": 100,
        "index_deadletter_queue": "https://queue.amazonaws.com/...",
        "index_cuboids_keys_queue": "https://queue.amazonaws.com/..."
      },
      "kv_config": {
        "cache_host": "cache.domain.boss",
        "read_timeout": 86400,
        "cache_db": "0"
      },
      "state_config": {
        "cache_state_db": "0",
        "cache_state_host": "cache-state.domain.boss"
      }
    },
    "id_supervisor_step_fcn": "arn:aws:states:...",
    "id_cuboid_supervisor_step_fcn": "arn:aws:states:...",
    "index_dequeue_cuboids_step_fcn": "arn:aws:states:...",
    "id_index_step_fcn": "arn:aws:states:...",
    "batch_enqueue_cuboids_step_fcn": "arn:aws:states:...",
    "fanout_enqueue_cuboids_step_fcn": "arn:aws:states:...",
    "max_cuboid_fanout": int,           # Max number of Index.CuboidSupervisors to fanout at a time.
    "max_items": int,                   # Max items to retrieve from Dynamo at a time.
    "index_enqueue_cuboids_step_fcn": "arn:...",
    "lookup_key": "..."             # collection&exp&chan&res
    "index_ids_sqs_url": "...",
    # Number of object ids to include in a single SQS message.
    "num_ids_per_msg": 20,
    "id_chunk_size": 20,
    "wait_time": 5,
}
"""

version: '1.0'
timeout: 86400      # 1 day

Pass()
    """Init
    """
    result: '$.status'
    data:
        {'done': False, 'lookup_key_n': 0}

while '$.status.done' == False:
    """WhileStillTraversingLookupKeyIndex
    """
    Pass()
        """UpdateOperationFieldQuery
        Simply adds the name of the operation so it can be logged properly in 
        the deadletter queue in case of a failure when querying DynamoDB.
        """
        result: '$.operation'
        data: 
            ['QueryS3Index']

    Lambda('indexFindCuboidsLambda')
        """QueryS3IndexTable

        index_find_cuboids_lambda.py
        """
        retry [] 60 3 2.0
        catch []: '$.result'
            Lambda('indexWriteFailedLambda')
                """S3ReadFailed
                """
                retry ['KeyError'] 1 0 1.0
                retry [] 10 2 2.0
                catch []: '$.dlqresult'
                    Fail('Exception', 'Failed to write to dead letter queue')
                        """FailedSendingReadFailToDeadLetterQueue
                        """
            Fail('Exception', 'Failed to read from S3 index table')
                """FailedReadingS3Index
                """

    Pass()
        """UpdateOperationFieldStartSfn
        Simply adds the name of the operation so it can be logged properly in 
        the deadletter queue in case of a failure when starting the step 
        function.
        """
        result: '$.operation'
        data: 
            ['StartEnqueueCuboidsSfn']

    Lambda('startSfnLambda')
        """AsynchEnqueueCuboids

        start_sfn_lambda.py

        Starts Index.FanoutEnqueueCuboids.
        The arn is set by the QueryS3IndexTable task state's lambda.

        ToDo: consider using a Map state and Step Function SQS integration to
        enqueue cuboid messages.  This should eliminate both Index.FanoutEnqueue
        and Index.EnqueueCuboids step functions.
        """
        retry [
            'StateMachineDoesNotExist', 
            'InvalidArn',
            'KeyError',
            'TypeError'
        ] 1 0 1.0
        retry [] 60 3 2.0
        catch []: '$.result'
            Lambda('indexWriteFailedLambda')
                """FanoutEnqueueFailed
                """
                retry ['KeyError'] 1 0 1.0
                retry [] 10 2 2.0
                catch []: '$.dlqresult'
                    Fail('Exception', 'Failed to write to dead letter queue')
                        """FailedSendingFanoutToDeadLetterQueue
                        """
            Fail('Exception', 'Failed to start fanout enqueuing step function')
                """FailedFanningOutEnqueue
                """

Success()
    """Success
    """
