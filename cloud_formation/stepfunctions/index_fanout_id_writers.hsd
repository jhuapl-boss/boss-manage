"""Fanouts Index.IdWriter step functions.  Invoked by the 
Index.CuboidSupervisor step function.

ToDo: rename this step function to reflect that it's no longer fanning out
Index.IdWriter sfns.

Expected inputs:
{
    "config": spdb config object
    "id_index_step_fcn": ARN of Index.IdWriter
    "sqs_url": url of queue that holds jobs for Index.IdWriter
    "num_ids_per_msg": Max number of ids to include in each job
    "cuboid_object_key": Write this cuboid's S3 object key to each id
    "version": Reserved for future use
    "worker_id": Used to query DynamoDB in parallel
    "id_chunk_size": Number of ids to include in each "chunk" output by load_ids_from_s3_lambda.py
}
"""

version: '1.0'
timeout: 1800

Lambda('indexLoadIdsFromS3Lambda')
    """LoadIdsFromS3Index

    Get the cuboid's ids from the S3 index.

    load_ids_from_s3_lambda.py
    """
    retry [] 40 2 2.5
    catch []: '$.result'
        Lambda('indexWriteFailedLambda')
            """LoadIdsFailed

            write_index_failed_lambda.py
            """
            retry ['KeyError'] 1 0 1.0
            retry [] 10 2 2.0
            catch []: '$.dlqresult'
                Fail('Exception', 'Failed to write to dead letter queue')
                    """FailedLoadIdsFailedToDeadLetterQueue
                    """
        Fail('Exception', 'Failed loading ids from S3')
            """FailedLoadingFromS3
            """

map:
    """EnqueueIdsWithMap

    Send ids to SQS queue.

    enqueue_cuboids_ids_lambda.py
    """
    iterator:
        while '$.done' == False and '$.attempt' < 5:
            """WhileNotDone

            Retry up to 3 times (attempts 1 - 4).
            """
            Lambda('indexEnqueueCuboidIdsLambda')
                """EnqueueCuboidIds

                enqueue_cuboid_ids_lambda.py
                """
                retry ['KeyError'] 1 0 1.0
                catch []: '$.result'
                    Lambda('indexWriteFailedLambda')
                        """EnqueueSomeIdsFailed

                        write_index_failed_lambda.py
                        """
                        retry ['KeyError'] 1 0 1.0
                        retry [] 10 2 2.0
                        catch []: '$.dlqresult'
                            Fail('Exception', 'Failed to write to dead letter queue')
                                """FailedEnqueueIdsToDeadLetterQueue
                                """
                    Fail('Exception', 'Failed to enqueue ids')
                        """FailedEnqueuingIds
                        """
            Wait(seconds_path='$.wait_time')
                """BackoffDelay

                If non-zero, wait before retrying.
                """
    items_path: "$.id_chunks"
    parameters:
        ids.$: "$$.Map.Item.Value"
        cuboid_object_key.$: "$.cuboid_object_key"
        version.$: "$.version"
        config.$: "$.config"
        id_index_step_fcn.$: "$.id_index_step_fcn"
        sqs_url.$: "$.index_ids_sqs_url"
        num_ids_per_msg.$: "$.num_ids_per_msg"
        wait_time.$: "$.wait_time"
        done: False
        attempt: 1
    catch []: '$.result'
        Lambda('indexWriteFailedLambda')
            """EnqueueIdsWithMapFailed

            write_index_failed_lambda.py
            """
            retry ['KeyError'] 1 0 1.0
            retry [] 10 2 2.0
            catch []: '$.dlqresult'
                Fail('Exception', 'Failed to write to dead letter queue')
                    """FailedEnqueueIdsWithMapFailedToDeadLetterQueue
                    """
        Fail('Exception', 'Failed loading ids from S3')
            """FailedEnqueueingIds
            """

Success()
    """Success
    """

