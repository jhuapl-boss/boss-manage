"""State machine that enqueues up to 10 cuboid object keys to the index cuboids
keys queue.

Sample input:
{
    "config": {
      "object_store_config": {
        "id_count_table": "idCount.domain.boss",
        "page_in_lambda_function": "multiLambda-domain-boss",
        "page_out_lambda_function": "multiLambda-domain-boss",
        "cuboid_bucket": "cuboids.domain.boss",
        "s3_index_table": "s3index.domain.boss",
        "id_index_table": "idIndex.domain.boss",
        "s3_flush_queue": "https://queue.amazonaws.com/...",
        "id_index_new_chunk_threshold": 100,
        "index_deadletter_queue": "https://queue.amazonaws.com/..."
      },
      "kv_config": {
        "cache_host": "cache.domain.boss",
        "read_timeout": 86400,
        "cache_db": "0"
      },
      "state_config": {
        "cache_state_db": "0",
        "cache_state_host": "cache-state.domain.boss"
      }
    },
    "cuboid_msgs": [],      # Array of SQS messages.
    "operation": "batch_enqueue_cuboids",
    "enqueue_done": false
}
"""

version: '1.0'
timeout: 7200 # 2 hours

Pass()
    """UpdateOperationFieldMap
    Simply adds the name of the operation so it can be logged properly in 
    the deadletter queue in case of a failure when starting the map state. 
    """
    result: '$.operation'
    data: 
        'EnqueueCuboidsKeysMap'

map:
    """EnqueueCuboidKeysMap
    """
    iterator:
        while '$.enqueue_done' == False:
            """WhileStillEnqueuing
            """
            Lambda('indexBatchEnqueueCuboidsLambda')
                """BatchEnqueueCuboids

                batch_enqueue_cuboids_lambda.py
                """
                retry [
                    'QueueDoesNotExist',
                    'UnsupportedOperation',
                    'InvalidAttributeName'
                ] 1 0 1.0
                retry [] 45 3 2.0
                catch []: '$.result'
                    Lambda('indexWriteFailedLambda')
                        """EnqueueCuboidKeyFailed

                        Send inputs to the deadletter queue.
                        """
                        retry ['KeyError'] 1 0 1.0
                        retry [] 10 2 2.0
                        catch []:
                            Fail('Exception', 'Failed to write to dead letter queue')
                                """FailedSendingToDeadLetterQueue
                                """
                    Fail('Exception', 'Failed to batch enqueue cuboid object keys')
                        """FailedBatchEnqueuing
                        """
    max_concurrency: 5
    items_path: "$.obj_keys"
    parameters:
        obj_keys.$: "$$.Map.Item.Value"
        config.$: "$.config"
        id_cuboid_supervisor_step_fcn.$: "$.id_cuboid_supervisor_step_fcn"
        fanout_id_writers_step_fcn.$: "$.fanout_id_writers_step_fcn"
        id_index_step_fcn.$: "$.id_index_step_fcn"
        index_ids_sqs_url.$: "$.index_ids_sqs_url"
        num_ids_per_msg.$: "$.num_ids_per_msg"
        id_chunk_size.$: "$.id_chunk_size"
        wait_time.$: "$.wait_time"
        enqueue_done: False
        operation: "Enqueuing cuboids to cuboids keys queue"
    catch []: '$.result'
        Lambda('indexWriteFailedLambda')
            """EnqueueCuboidKeysWithMapFailed

            write_index_failed_lambda.py
            """
            retry ['KeyError'] 1 0 1.0
            retry [] 10 2 2.0
            catch []: '$.dlqresult'
                Fail('Exception', 'Failed to write to dead letter queue')
                    """FailedEnqueueCuboidKeysWithMapFailedToDeadLetterQueue
                    """
        Fail('Exception', 'Failed enqueuing to cuboid keys queue')
            """FailedEnqueueingCuboidKeys
            """

Success()
    """Success
    """

