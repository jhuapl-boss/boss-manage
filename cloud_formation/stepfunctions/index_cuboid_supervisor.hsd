"""State machine responsible for indexing of a single cuboid.

* Writes all unique ids to the id-set attribute in the S3 index table.

* Writes the cuboid's morton id to the cuboid-set attribute of each id in the 
  id index table.

Sample input:
{
    "id_index_step_fcn": "arn:aws:states:us-east-1:...",
    "config": {
      "object_store_config": {
        "id_count_table": "idCount.domain.boss",
        "page_in_lambda_function": "multiLambda-domain-boss",
        "page_out_lambda_function": "multiLambda-domain-boss",
        "cuboid_bucket": "cuboids.domain.boss",
        "s3_index_table": "s3index.domain.boss",
        "id_index_table": "idIndex.domain.boss",
        "s3_flush_queue": "https://queue.amazonaws.com/...",
        "id_index_new_chunk_threshold": 100,
        "index_deadletter_queue": "https://queue.amazonaws.com/..."
      },
      "kv_config": {
        "cache_host": "cache.domain.boss",
        "read_timeout": 86400,
        "cache_db": "0"
      },
      "state_config": {
        "cache_state_db": "0",
        "cache_state_host": "cache-state.domain.boss"
      }
    },
    "cuboid": {
        "object-key": {"S": str},
        "version-node": {"N": str},
    },
    "fanout_id_writers_step_fcn": str,
    "index_ids_sqs_url": str,
    "num_ids_per_msg": int,
    "id_chunk_size": int,
    "wait_time": int,
}
"""

version: '1.0'

# Timeout based on lambda timeout (120s), retry settings of the lambda task
# and the Wait setting of the while loop.
timeout: 3600

Lambda('indexS3WriterLambda')
    """WriteS3Index

    write_s3_lambda_index.py

    Write the ids in the cuboid to the S3 index.
    """
    retry ['NoSuchKey'] 1 0 1.0    # Object doesn't exist in S3 bucket.
    retry ['KeyError'] 1 0 1.0
    retry [] 20 3 2.0
    catch []: '$.result'
        Lambda('indexWriteFailedLambda')
            """S3WriteFailed
            """
            retry ['KeyError'] 1 0 1.0
            retry [] 10 2 2.0
            catch []: '$.dlqresult'
                Fail('Exception', 'Failed to write to dead letter queue')
                    """FailedSendingS3UpdateToDeadLetterQueue
                    """
        Fail('Exception', 'Failed updating S3 index')
            """FailedUpdatingS3Index
            """

map:
    """GiveOutWork

    Start up at least 1 IndexIdWriter creator depending on number of workers
    given.
    """
    iterator:
        Lambda('startSfnLambda')
            """StartIndexIdWriter

            start_sfn_lambda.py
            """
            retry ['KeyError'] 1 0 1.0
            catch []: '$.result'
                Lambda('indexWriteFailedLambda')
                    """FailedSpawningIdWriterCreatorToDeadLetterQueue

                    write_index_failed_lambda.py
                    """
                    retry ['KeyError'] 1 0 1.0
                    retry [] 10 2 2.0
                    catch []: '$.dlqresult'
                        Fail('Exception', 'Failed to write to dead letter queue')
                            """SpawningIdWriterCreatorToDeadLetterQueueFailed
                            """
                Fail('Exception', 'Failed spawning IdWriterCreator')
                    """FailedSpawning
                    """

    max_concurrency: 1
    items_path: "$.worker_ids"
    parameters:
        worker_id.$: "$$.Map.Item.Value"
        sfn_arn.$: "$.fanout_id_writers_step_fcn"
        cuboid_object_key.$: "$.cuboid.object-key.S"
        version.$: "$.cuboid.version-node.N"
        config.$: "$.config"
        index_deadletter_queue.$: "$.config.object_store_config.index_deadletter_queue"
        id_index_step_fcn.$: "$.id_index_step_fcn"
        index_ids_sqs_url.$: "$.index_ids_sqs_url"
        num_ids_per_msg.$: "$.num_ids_per_msg"
        num_ids_per_worker.$: "$.num_ids_per_worker"
        id_chunk_size.$: "$.id_chunk_size"
        wait_time.$: "$.wait_time"

    catch []: '$.result'
        Lambda('indexWriteFailedLambda')
            """GiveOutWorkToDeadLetterQueue

            write_index_failed_lambda.py
            """
            retry ['KeyError'] 1 0 1.0
            retry [] 10 2 2.0
            catch []: '$.dlqresult'
                Fail('Exception', 'Failed to write to dead letter queue')
                    """FailedGiveOutWorkToDeadLetterQueue
                    """
        Fail('Exception', 'Failed spawning IdWriterCreator')
            """FailedGiveOutToWork
            """

Success()
    """Success
    """
