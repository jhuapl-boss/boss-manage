"""Step function that initiates the actual writes to the id index DynamoDB
table.

Inputs:
{
    "config": {
      "object_store_config": {
        "id_count_table": "idCount.domain.boss",
        "page_in_lambda_function": "multiLambda-domain-boss",
        "page_out_lambda_function": "multiLambda-domain-boss",
        "cuboid_bucket": "cuboids.domain.boss",
        "s3_index_table": "s3index.domain.boss",
        "id_index_table": "idIndex.domain.boss",
        "s3_flush_queue": "https://queue.amazonaws.com/...",
        "id_index_new_chunk_threshold": 100,
        "index_deadletter_queue": "https://queue.amazonaws.com/..."
      },
      "kv_config": {
        "cache_host": "cache.domain.boss",
        "read_timeout": 86400,
        "cache_db": "0"
      },
      "state_config": {
        "cache_state_db": "0",
        "cache_state_host": "cache-state.domain.boss"
      }
    },
    "id_index_step_fcn": "arn:aws:states:...",
    "batch_enqueue_cuboids_step_fcn": "arn:aws:states:...",
    "fanout_enqueue_cuboids_step_fcn": "arn:aws:states:...",
    "index_enqueue_cuboids_step_fcn": "arn:...",
    "index_dequeue_cuboids_step_fcn": "arn:...",
    "max_cuboid_fanout": int,
    "queue_empty": False
}
"""

version: '1.0'
timeout: 86400      # 1 day

while '$.queue_empty' == False:
    """WhileQueueNotEmpty
    """
    Lambda('indexCheckForThrottlingLambda')
        """CheckForDynamoThrottling

        check_for_index_throttling_lambda.py
        """
        retry [
            'InvalideParameterValueException', 
            'InvalideParameterCombinationException',
            'InvalideFormatFault',
            'MissingRequiredParameterException',
            'ResourceNotFound'
        ] 1 0 1.0
        retry [] 30 2 2.0
        catch []: '$.result'
            Fail('Exception', 'Failed talking to CloudWatch')
                """FailedThrottlingCheck
                """

    if '$.write_throttled' == True or '$.read_throttled' == True:
        """IfWriteThrottled
        """
        Wait(seconds=60)
            """Wait60Seconds
            """
    else:
        Lambda('indexGetNumCuboidKeysMsgsLambda')
            """GetNumMsgsInCuboidsKeysQueue

            get_num_msgs_cuboid_keys_queue_lambda.py
            """
            retry [
                'QueueDoesNotExist',
                'UnsupportedOperation',
                'InvalidAttributeName'
            ] 1 0 1.0
            retry [] 30 2 2.0
            catch []: '$.result'
                Fail('Exception', 'Failed getting number of messages in queue')
                    """FailedGetNumMsgsFromQueue
                    """

        if '$.ApproximateNumberOfMessages' > 0:
            """IfHaveMessages
            """

            Pass()
                """SetFanoutParameters
                """
                result: '$.fanout_params'
                data:
                    {
                        "max_concurrent": 5,
                        "rampup_delay": 10,
                        "rampup_backoff": 0.8,
                        "status_delay": 2
                    }

            while '$.finished' == False:
                """WhileStillSpawningCuboidIndexers
                """
                Lambda('indexFanoutDequeueCuboidsKeysLambda')
                    """FanoutDequeueCuboidKeys

                    fanout_dequeue_cuboid_keys_lambda.py
                    """
                    retry [
                        'KeyError', 
                        'TypeError', 
                        'NameError', 
                        'AttributeError'
                    ] 1 0 1.0
                    retry [] 30 2 2.0
                    catch []: '$.result'
                        Fail('Exception', 'Failed to fanout dequeue step functions')
                            """FailedToFanoutDequeueStepFunctions
                            """
        else:
            Wait(seconds=180)
                """Wait180Seconds

                Allow for messages to become visible again.
                """

            Lambda('indexGetNumCuboidKeysMsgsLambda')
                """GetNumMsgsInCuboidsKeysQueueAgain

                get_num_msgs_cuboid_keys_queue_lambda.py
                """
                retry [
                    'QueueDoesNotExist',
                    'UnsupportedOperation',
                    'InvalidAttributeName'
                ] 1 0 1.0
                retry [] 30 2 2.0
                catch []: '$.result'
                    Fail('Exception', 'Failed getting number of messages in queue')
                        """FailedGetNumMsgsFromQueueAgain
                        """

            if '$.ApproximateNumberOfMessages' == 0:
                """IfNoMessagesLeft
                """
                Success()
                    """Success
                    """

